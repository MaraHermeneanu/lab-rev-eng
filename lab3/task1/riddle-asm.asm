

;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2024 Hex-Rays, <support@hex-rays.com>           |
; |                            Freeware version                             |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : B3AF076450F7F32A2220938F5C1031B0D3D004242EF17C506801750AA317A407
; Input MD5    : 740E382683207816CCFC1E1A38953568
; Input CRC32  : CDB4DA21
; Compiler     : GNU C++

; File Name   : /Users/mara.hermeneanu/Downloads/Lab files FMI INFO/task1/riddle
; Format      : ELF64 for x86-64 (Shared object)
; Interpreter '/lib64/ld-linux-x86-64.so.2'
; Needed Library 'libc.so.6'
;

                .686p
                .mmx
                .model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
LOAD            segment mempage public 'DATA' use64
                assume cs:LOAD
dword_0         dd 464C457Fh            ; DATA XREF: LOAD:0000000000000350↓o
                                        ; LOAD:0000000000000368↓o ...
                                        ; File format: \x7FELF
                db 2                    ; File class: 64-bit
                db 1                    ; Data encoding: little-endian
                db 1                    ; File version
                db 0                    ; OS/ABI: UNIX System V ABI
                db 0                    ; ABI Version
                db 7 dup(0)             ; Padding
                dw 3                    ; File type: Shared object
                dw 3Eh                  ; Machine: x86-64
                dd 1                    ; File version
                dq offset start         ; Entry point
                dq 40h                  ; PHT file offset
                dq 31C8h                ; SHT file offset
                dd 0                    ; Processor-specific flags
                dw 40h                  ; ELF header size
                dw 38h                  ; PHT entry size
                dw 0Bh                  ; Number of entries in PHT
                dw 40h                  ; SHT entry size
                dw 1Dh                  ; Number of entries in SHT
                dw 1Ch                  ; SHT entry index for string table
; ELF64 Program Header
; PHT Entry 0
dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
                                        ; Type: PHDR
                dd 4                    ; Flags
                dq 40h                  ; File offset
                dq offset dword_40      ; Virtual address
                dq 40h                  ; Physical address
                dq 268h                 ; Size in file image
                dq 268h                 ; Size in memory image
                dq 8                    ; Alignment
; PHT Entry 1
                dd 3                    ; Type: INTERP
                dd 4                    ; Flags
                dq 2A8h                 ; File offset
                dq offset aLib64LdLinuxX8 ; Virtual address
                dq 2A8h                 ; Physical address
                dq 1Ch                  ; Size in file image
                dq 1Ch                  ; Size in memory image
                dq 1                    ; Alignment
; PHT Entry 2
                dd 1                    ; Type: LOAD
                dd 4                    ; Flags
                dq 0                    ; File offset
                dq 0                    ; Virtual address
                dq 0                    ; Physical address
                dq 910h                 ; Size in file image
                dq 910h                 ; Size in memory image
                dq 1000h                ; Alignment
; PHT Entry 3
                dd 1                    ; Type: LOAD
                dd 5                    ; Flags
                dq 1000h                ; File offset
                dq offset _init_proc    ; Virtual address
                dq 1000h                ; Physical address
                dq 62Dh                 ; Size in file image
                dq 62Dh                 ; Size in memory image
                dq 1000h                ; Alignment
; PHT Entry 4
                dd 1                    ; Type: LOAD
                dd 4                    ; Flags
                dq 2000h                ; File offset
                dq offset unk_2000      ; Virtual address
                dq 2000h                ; Physical address
                dq 288h                 ; Size in file image
                dq 288h                 ; Size in memory image
                dq 1000h                ; Alignment
; PHT Entry 5
                dd 1                    ; Type: LOAD
                dd 6                    ; Flags
                dq 2DD8h                ; File offset
                dq offset off_3DD8      ; Virtual address
                dq 3DD8h                ; Physical address
                dq 2C0h                 ; Size in file image
                dq 2E8h                 ; Size in memory image
                dq 1000h                ; Alignment
; PHT Entry 6
                dd 2                    ; Type: DYNAMIC
                dd 6                    ; Flags
                dq 2DF0h                ; File offset
                dq offset stru_3DF0     ; Virtual address
                dq 3DF0h                ; Physical address
                dq 1E0h                 ; Size in file image
                dq 1E0h                 ; Size in memory image
                dq 8                    ; Alignment
; PHT Entry 7
                dd 4                    ; Type: NOTE
                dd 4                    ; Flags
                dq 2C4h                 ; File offset
                dq offset dword_2C4     ; Virtual address
                dq 2C4h                 ; Physical address
                dq 44h                  ; Size in file image
                dq 44h                  ; Size in memory image
                dq 4                    ; Alignment
; PHT Entry 8
                dd 6474E550h            ; Type: EH_FRAME
                dd 4                    ; Flags
                dq 20A0h                ; File offset
                dq offset unk_20A0      ; Virtual address
                dq 20A0h                ; Physical address
                dq 5Ch                  ; Size in file image
                dq 5Ch                  ; Size in memory image
                dq 4                    ; Alignment
; PHT Entry 9
                dd 6474E551h            ; Type: STACK
                dd 6                    ; Flags
                dq 0                    ; File offset
                dq 0                    ; Virtual address
                dq 0                    ; Physical address
                dq 0                    ; Size in file image
                dq 0                    ; Size in memory image
                dq 10h                  ; Alignment
; PHT Entry 10
                dd 6474E552h            ; Type: RO-AFTER
                dd 4                    ; Flags
                dq 2DD8h                ; File offset
                dq offset off_3DD8      ; Virtual address
                dq 3DD8h                ; Physical address
                dq 228h                 ; Size in file image
                dq 228h                 ; Size in memory image
                dq 1                    ; Alignment
aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
                                        ; DATA XREF: LOAD:0000000000000088↑o
; ELF Note Entry
dword_2C4       dd 4                    ; DATA XREF: LOAD:00000000000001D8↑o
                                        ; Name Size
                dd 10h                  ; Desc Size
                dd 1                    ; Type: NT_GNU_ABI_TAG
aGnu            db 'GNU',0              ; Name
                dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
; ELF Note Entry
                dd 4                    ; Name Size
                dd 14h                  ; Desc Size
                dd 3                    ; Type: NT_GNU_BUILD_ID
aGnu_0          db 'GNU',0              ; Name
                db 15h, 0A8h, 0BCh, 93h, 0CDh, 0DEh, 20h, 13h, 0Ah, 0E1h ; Desc
                db 50h, 0B3h, 11h, 78h, 8Eh, 3, 6Bh, 8Ah, 67h, 0BBh
; ELF GNU Hash Table
elf_gnu_hash_nbuckets dd 3
elf_gnu_hash_symbias dd 14h
elf_gnu_hash_bitmask_nwords dd 1
elf_gnu_hash_shift dd 6
elf_gnu_hash_indexes dq 10018000A10000h
elf_gnu_hash_bucket dd 14h, 16h, 0
elf_gnu_hash_chain dd 1C8C1D28h, 6DCE65D1h, 10615567h
; ELF Symbol Table
                Elf64_Sym <0>
                Elf64_Sym <offset aFree - offset unk_560, 12h, 0, 0, offset dword_0, \ ; "free"
                           0>
                Elf64_Sym <offset aItmDeregistert - offset unk_560, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
                           offset dword_0, 0>
                Elf64_Sym <offset aPuts - offset unk_560, 12h, 0, 0, offset dword_0, \ ; "puts"
                           0>
                Elf64_Sym <offset aSetbuf - offset unk_560, 12h, 0, 0, offset dword_0,\ ; "setbuf"
                           0>
                Elf64_Sym <offset aPrintf - offset unk_560, 12h, 0, 0, offset dword_0,\ ; "printf"
                           0>
                Elf64_Sym <offset aAlarm - offset unk_560, 12h, 0, 0, offset dword_0, \ ; "alarm"
                           0>
                Elf64_Sym <offset aClose - offset unk_560, 12h, 0, 0, offset dword_0, \ ; "close"
                           0>
                Elf64_Sym <offset aRead - offset unk_560, 12h, 0, 0, offset dword_0, \ ; "read"
                           0>
                Elf64_Sym <offset aLibcStartMain - offset unk_560, 12h, 0, 0, \ ; "__libc_start_main"
                           offset dword_0, 0>
                Elf64_Sym <offset aSrand - offset unk_560, 12h, 0, 0, offset dword_0, \ ; "srand"
                           0>
                Elf64_Sym <offset aMemcmp - offset unk_560, 12h, 0, 0, offset dword_0,\ ; "memcmp"
                           0>
                Elf64_Sym <offset aCalloc - offset unk_560, 12h, 0, 0, offset dword_0,\ ; "calloc"
                           0>
                Elf64_Sym <offset aGmonStart - offset unk_560, 20h, 0, 0, \ ; "__gmon_start__"
                           offset dword_0, 0>
                Elf64_Sym <offset aMemcpy - offset unk_560, 12h, 0, 0, offset dword_0,\ ; "memcpy"
                           0>
                Elf64_Sym <offset aOpen - offset unk_560, 12h, 0, 0, offset dword_0, \ ; "open"
                           0>
                Elf64_Sym <offset aJvRegisterclas - offset unk_560, 20h, 0, 0, \ ; "_Jv_RegisterClasses"
                           offset dword_0, 0>
                Elf64_Sym <offset aExit - offset unk_560, 12h, 0, 0, offset dword_0, \ ; "exit"
                           0>
                Elf64_Sym <offset aItmRegistertmc - offset unk_560, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
                           offset dword_0, 0>
                Elf64_Sym <offset aSrand+1 - offset unk_560, 12h, 0, 0, \ ; "rand"
                           offset dword_0, 0>
                Elf64_Sym <offset aStdout - offset unk_560, 11h, 0, 1Ah, \ ; "stdout"
                           offset stdout, 8>
                Elf64_Sym <offset aCxaFinalize - offset unk_560, 22h, 0, 0, \ ; "__cxa_finalize"
                           offset dword_0, 0>
                Elf64_Sym <offset aStdin - offset unk_560, 11h, 0, 1Ah, offset stdin, \ ; "stdin"
                           8>
; ELF String Table
unk_560         db    0                 ; DATA XREF: LOAD:0000000000000350↑o
                                        ; LOAD:0000000000000368↑o ...
aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000688↓o
aExit           db 'exit',0             ; DATA XREF: LOAD:00000000000004D0↑o
aSrand          db 'srand',0            ; DATA XREF: LOAD:0000000000000428↑o
                                        ; LOAD:0000000000000500↑o
aPuts           db 'puts',0             ; DATA XREF: LOAD:0000000000000380↑o
aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000548↑o
aPrintf         db 'printf',0           ; DATA XREF: LOAD:00000000000003B0↑o
aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000458↑o
aRead           db 'read',0             ; DATA XREF: LOAD:00000000000003F8↑o
aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000440↑o
aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000518↑o
aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000488↑o
aAlarm          db 'alarm',0            ; DATA XREF: LOAD:00000000000003C8↑o
aClose          db 'close',0            ; DATA XREF: LOAD:00000000000003E0↑o
aOpen           db 'open',0             ; DATA XREF: LOAD:00000000000004A0↑o
aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000530↑o
aSetbuf         db 'setbuf',0           ; DATA XREF: LOAD:0000000000000398↑o
aLibcStartMain  db '__libc_start_main',0 ; DATA XREF: LOAD:0000000000000410↑o
aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000350↑o
aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000698↓o
aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:00000000000006A8↓o
aItmDeregistert db '_ITM_deregisterTMCloneTable',0
                                        ; DATA XREF: LOAD:0000000000000368↑o
aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000470↑o
aJvRegisterclas db '_Jv_RegisterClasses',0 ; DATA XREF: LOAD:00000000000004B8↑o
aItmRegistertmc db '_ITM_registerTMCloneTable',0
                                        ; DATA XREF: LOAD:00000000000004E8↑o
                align 8
; ELF GNU Symbol Version Table
                dw 0
                dw 2                    ; free@@GLIBC_2.2.5
                dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
                dw 2                    ; puts@@GLIBC_2.2.5
                dw 2                    ; setbuf@@GLIBC_2.2.5
                dw 2                    ; printf@@GLIBC_2.2.5
                dw 2                    ; alarm@@GLIBC_2.2.5
                dw 2                    ; close@@GLIBC_2.2.5
                dw 2                    ; read@@GLIBC_2.2.5
                dw 2                    ; __libc_start_main@@GLIBC_2.2.5
                dw 2                    ; srand@@GLIBC_2.2.5
                dw 2                    ; memcmp@@GLIBC_2.2.5
                dw 2                    ; calloc@@GLIBC_2.2.5
                dw 0                    ; local  symbol: __gmon_start__
                dw 3                    ; memcpy@@GLIBC_2.14
                dw 2                    ; open@@GLIBC_2.2.5
                dw 0                    ; local  symbol: _Jv_RegisterClasses
                dw 2                    ; exit@@GLIBC_2.2.5
                dw 0                    ; local  symbol: _ITM_registerTMCloneTable
                dw 2                    ; rand@@GLIBC_2.2.5
                dw 2                    ; stdout@@GLIBC_2.2.5
                dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
                dw 2                    ; stdin@@GLIBC_2.2.5
                dw 0
; ELF GNU Symbol Version Requirements
                Elf64_Verneed <1, 2, offset aLibcSo6 - offset unk_560, 10h, 0> ; "libc.so.6"
                Elf64_Vernaux <6969194h, 0, 3, offset aGlibc214 - offset unk_560, 10h> ; "GLIBC_2.14"
                Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset unk_560, 0> ; "GLIBC_2.2.5"
; ELF RELA Relocation Table
                Elf64_Rela <3DD8h, 8, 1220h> ; R_X86_64_RELATIVE +1220h
                Elf64_Rela <3DE0h, 8, 11E0h> ; R_X86_64_RELATIVE +11E0h
                Elf64_Rela <4090h, 8, 4090h> ; R_X86_64_RELATIVE +4090h
                Elf64_Rela <3FD0h, 200000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
                Elf64_Rela <3FD8h, 900000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
                Elf64_Rela <3FE0h, 0D00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
                Elf64_Rela <3FE8h, 1000000006h, 0> ; R_X86_64_GLOB_DAT _Jv_RegisterClasses
                Elf64_Rela <3FF0h, 1200000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
                Elf64_Rela <3FF8h, 1500000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
                Elf64_Rela <40A0h, 1400000005h, 0> ; R_X86_64_COPY stdout
                Elf64_Rela <40B0h, 1600000005h, 0> ; R_X86_64_COPY stdin
; ELF JMPREL Relocation Table
                Elf64_Rela <4018h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
                Elf64_Rela <4020h, 300000007h, 0> ; R_X86_64_JUMP_SLOT puts
                Elf64_Rela <4028h, 400000007h, 0> ; R_X86_64_JUMP_SLOT setbuf
                Elf64_Rela <4030h, 500000007h, 0> ; R_X86_64_JUMP_SLOT printf
                Elf64_Rela <4038h, 600000007h, 0> ; R_X86_64_JUMP_SLOT alarm
                Elf64_Rela <4040h, 700000007h, 0> ; R_X86_64_JUMP_SLOT close
                Elf64_Rela <4048h, 800000007h, 0> ; R_X86_64_JUMP_SLOT read
                Elf64_Rela <4050h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT srand
                Elf64_Rela <4058h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
                Elf64_Rela <4060h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
                Elf64_Rela <4068h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
                Elf64_Rela <4070h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT open
                Elf64_Rela <4078h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT exit
                Elf64_Rela <4080h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT rand
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_init           segment dword public 'CODE' use64
                assume cs:_init
                ;org 1000h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


                public _init_proc
_init_proc      proc near               ; CODE XREF: init+28↓p
                                        ; DATA XREF: LOAD:00000000000000F8↑o
                sub     rsp, 8
                mov     rax, cs:__gmon_start___ptr
                test    rax, rax
                jz      short loc_1012
                call    rax ; __gmon_start__

loc_1012:                               ; CODE XREF: _init_proc+E↑j
                add     rsp, 8
                retn
_init_proc      endp

_init           ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment mempage public 'CODE' use64
                assume cs:LOAD
                ;org 1017h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 20h
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_plt            segment para public 'CODE' use64
                assume cs:_plt
                ;org 1020h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


sub_1020        proc near               ; CODE XREF: .plt:000000000000103B↓j
                                        ; .plt:000000000000104B↓j ...
; __unwind {
                push    cs:qword_4008
                jmp     cs:qword_4010
sub_1020        endp

; ---------------------------------------------------------------------------
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _free. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    0
                jmp     sub_1020
; [00000006 BYTES: COLLAPSED FUNCTION _puts. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    1
                jmp     sub_1020
; [00000006 BYTES: COLLAPSED FUNCTION _setbuf. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    2
                jmp     sub_1020
; [00000006 BYTES: COLLAPSED FUNCTION _printf. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    3
                jmp     sub_1020
; [00000006 BYTES: COLLAPSED FUNCTION _alarm. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    4
                jmp     sub_1020
; [00000006 BYTES: COLLAPSED FUNCTION _close. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    5
                jmp     sub_1020
; [00000006 BYTES: COLLAPSED FUNCTION _read. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    6
                jmp     sub_1020
; [00000006 BYTES: COLLAPSED FUNCTION _srand. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    7
                jmp     sub_1020
; [00000006 BYTES: COLLAPSED FUNCTION _memcmp. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    8
                jmp     sub_1020
; [00000006 BYTES: COLLAPSED FUNCTION _calloc. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    9
                jmp     sub_1020
; [00000006 BYTES: COLLAPSED FUNCTION _memcpy. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    0Ah
                jmp     sub_1020
; [00000006 BYTES: COLLAPSED FUNCTION _open. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    0Bh
                jmp     sub_1020
; [00000006 BYTES: COLLAPSED FUNCTION _exit. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    0Ch
                jmp     sub_1020
; [00000006 BYTES: COLLAPSED FUNCTION _rand. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    0Dh
                jmp     sub_1020
; } // starts at 1020
_plt            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_plt_got        segment qword public 'CODE' use64
                assume cs:_plt_got
                ;org 1110h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; [00000006 BYTES: COLLAPSED FUNCTION __cxa_finalize. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 8
; } // starts at 1110
_plt_got        ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment mempage public 'CODE' use64
                assume cs:LOAD
                ;org 1118h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 20h
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_text           segment para public 'CODE' use64
                assume cs:_text
                ;org 1120h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================

; Attributes: noreturn fuzzy-sp

                public start
start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
; __unwind {
                xor     ebp, ebp
                mov     r9, rdx         ; rtld_fini
                pop     rsi             ; argc
                mov     rdx, rsp        ; ubp_av
                and     rsp, 0FFFFFFFFFFFFFFF0h
                push    rax
                push    rsp             ; stack_end
                lea     r8, fini        ; fini
                lea     rcx, init       ; init
                lea     rdi, main       ; main
                call    cs:__libc_start_main_ptr
                hlt
; } // starts at 1120
start           endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1150        proc near               ; CODE XREF: sub_11E0:loc_1203↓p
                lea     rdi, unk_4098
                lea     rax, unk_409F
                push    rbp
                sub     rax, rdi
                mov     rbp, rsp
                cmp     rax, 0Eh
                jbe     short loc_1180
                mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
                test    rax, rax
                jz      short loc_1180
                pop     rbp
                jmp     rax
; ---------------------------------------------------------------------------
                align 20h

loc_1180:                               ; CODE XREF: sub_1150+19↑j sub_1150+25↑j
                pop     rbp
                retn
sub_1150        endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1190        proc near               ; CODE XREF: sub_1220:loc_122D↓j
                                        ; sub_1220+2B↓j
                lea     rdi, unk_4098
                lea     rsi, unk_4098
                push    rbp
                sub     rsi, rdi
                mov     rbp, rsp
                sar     rsi, 3
                mov     rax, rsi
                shr     rax, 3Fh
                add     rsi, rax
                sar     rsi, 1
                jz      short loc_11D0
                mov     rax, cs:_ITM_registerTMCloneTable_ptr
                test    rax, rax
                jz      short loc_11D0
                pop     rbp
                jmp     rax
; ---------------------------------------------------------------------------
                align 10h

loc_11D0:                               ; CODE XREF: sub_1190+26↑j sub_1190+32↑j
                pop     rbp
                retn
sub_1190        endp

; ---------------------------------------------------------------------------
                align 20h

; =============== S U B R O U T I N E =======================================


sub_11E0        proc near               ; DATA XREF: .fini_array:off_3DE0↓o
                cmp     cs:byte_40B8, 0
                jnz     short locret_1210
                cmp     cs:__cxa_finalize_ptr, 0
                push    rbp
                mov     rbp, rsp
                jz      short loc_1203
                mov     rdi, cs:off_4090 ; void *
                call    __cxa_finalize

loc_1203:                               ; CODE XREF: sub_11E0+15↑j
                call    sub_1150
                pop     rbp
                mov     cs:byte_40B8, 1

locret_1210:                            ; CODE XREF: sub_11E0+7↑j
                rep retn
sub_11E0        endp

; ---------------------------------------------------------------------------
                align 20h

; =============== S U B R O U T I N E =======================================


sub_1220        proc near               ; DATA XREF: .init_array:off_3DD8↓o
                lea     rdi, unk_3DE8
                cmp     qword ptr [rdi], 0
                jnz     short loc_1238

loc_122D:                               ; CODE XREF: sub_1220+22↓j
                jmp     sub_1190
; ---------------------------------------------------------------------------
                align 8

loc_1238:                               ; CODE XREF: sub_1220+B↑j
                mov     rax, cs:_Jv_RegisterClasses_ptr
                test    rax, rax
                jz      short loc_122D
                push    rbp
                mov     rbp, rsp
                call    rax ; _Jv_RegisterClasses
                pop     rbp
                jmp     sub_1190
sub_1220        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void setup()
setup           proc near               ; CODE XREF: main+D↓p

seed            = qword ptr -10h
fd              = dword ptr -4

; __unwind {
                push    rbp
                mov     rbp, rsp
                sub     rsp, 10h
                mov     esi, 0          ; oflag
                lea     rdi, file       ; "/dev/urandom"
                mov     eax, 0
                call    _open
                mov     [rbp+fd], eax
                lea     rcx, [rbp+seed]
                mov     eax, [rbp+fd]
                mov     edx, 8          ; nbytes
                mov     rsi, rcx        ; buf
                mov     edi, eax        ; fd
                call    _read
                mov     rax, [rbp+seed]
                mov     edi, eax        ; seed
                call    _srand
                mov     rax, [rbp+seed]
                mov     rsi, rax
                lea     rdi, format     ; "Today's magic number is %lx\n"
                mov     eax, 0
                call    _printf
                mov     edi, 3Ch ; '<'  ; seconds
                call    _alarm
                mov     eax, [rbp+fd]
                mov     edi, eax        ; fd
                call    _close
                mov     rax, cs:stdout
                mov     esi, 0          ; buf
                mov     rdi, rax        ; stream
                call    _setbuf
                mov     rax, cs:stdin
                mov     esi, 0          ; buf
                mov     rdi, rax        ; stream
                call    _setbuf
                nop
                leave
                retn
; } // starts at 1250
setup           endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; char *__fastcall gen_rand_string(int)
gen_rand_string proc near               ; CODE XREF: main+38↓p

var_1064        = dword ptr -1064h
var_1060        = byte ptr -1060h
src             = byte ptr -1010h
dest            = qword ptr -10h
var_5           = byte ptr -5
var_4           = dword ptr -4

; __unwind {
                push    rbp
                mov     rbp, rsp
                sub     rsp, 1070h
                mov     [rbp+var_1064], edi
                mov     rax, 4847464544434241h
                mov     qword ptr [rbp+var_1060], rax
                mov     rax, 504F4E4D4C4B4A49h
                mov     qword ptr [rbp+var_1060+8], rax
                mov     rax, 5857565554535251h
                mov     qword ptr [rbp+var_1060+10h], rax
                mov     rax, 6665646362615A59h
                mov     qword ptr [rbp+var_1060+18h], rax
                mov     rax, 6E6D6C6B6A696867h
                mov     qword ptr [rbp+var_1060+20h], rax
                mov     rax, 767574737271706Fh
                mov     qword ptr [rbp+var_1060+28h], rax
                mov     rax, 333231307A797877h
                mov     qword ptr [rbp+var_1060+30h], rax
                mov     rax, 2F2B393837363534h
                mov     qword ptr [rbp+var_1060+38h], rax
                mov     word ptr [rbp+var_1060+40h], 20h ; ' '
                mov     [rbp+var_4], 0
                jmp     short loc_13E2
; ---------------------------------------------------------------------------

loc_1394:                               ; CODE XREF: gen_rand_string+102↓j
                call    _rand
                movsxd  rcx, eax
                mov     rdx, 0FC0FC0FC0FC0FC1h
                mov     rax, rcx
                mul     rdx
                mov     rax, rdx
                shr     rax, 2
                mov     rdx, rax
                shl     rdx, 6
                add     rdx, rax
                mov     rax, rcx
                sub     rax, rdx
                movzx   eax, [rbp+rax+var_1060]
                mov     [rbp+var_5], al
                mov     eax, [rbp+var_4]
                cdqe
                movzx   edx, [rbp+var_5]
                mov     [rbp+rax+src], dl
                add     [rbp+var_4], 1

loc_13E2:                               ; CODE XREF: gen_rand_string+A9↑j
                mov     eax, [rbp+var_4]
                cmp     eax, [rbp+var_1064]
                jl      short loc_1394
                mov     eax, [rbp+var_1064]
                cdqe
                mov     [rbp+rax+src], 0
                mov     eax, [rbp+var_1064]
                add     eax, 1
                cdqe
                mov     esi, 1          ; size
                mov     rdi, rax        ; nmemb
                call    _calloc
                mov     [rbp+dest], rax
                mov     eax, [rbp+var_1064]
                add     eax, 1
                movsxd  rdx, eax        ; n
                lea     rcx, [rbp+src]
                mov     rax, [rbp+dest]
                mov     rsi, rcx        ; src
                mov     rdi, rax        ; dest
                call    _memcpy
                mov     rax, [rbp+dest]
                leave
                retn
; } // starts at 12E9
gen_rand_string endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; __int64 __fastcall validate(char *buf, int sz)
validate        proc near               ; CODE XREF: chance+59↓p

var_1C          = dword ptr -1Ch
var_18          = qword ptr -18h
var_4           = dword ptr -4

; __unwind {
                push    rbp
                mov     rbp, rsp
                sub     rsp, 20h
                mov     [rbp+var_18], rdi
                mov     [rbp+var_1C], esi
                mov     [rbp+var_4], 0
                jmp     short loc_149B
; ---------------------------------------------------------------------------

loc_1459:                               ; CODE XREF: validate+60↓j
                mov     eax, [rbp+var_4]
                movsxd  rdx, eax
                mov     rax, [rbp+var_18]
                add     rax, rdx
                movzx   eax, byte ptr [rax]
                cmp     al, 40h ; '@'
                jle     short loc_1497
                mov     eax, [rbp+var_4]
                movsxd  rdx, eax
                mov     rax, [rbp+var_18]
                add     rax, rdx
                movzx   eax, byte ptr [rax]
                cmp     al, 5Ah ; 'Z'
                jg      short loc_1497
                lea     rdi, s          ; "Come on.... seriously?"
                call    _puts
                mov     edi, 0FFFFFFFFh ; status
                call    _exit
; ---------------------------------------------------------------------------

loc_1497:                               ; CODE XREF: validate+2A↑j validate+3E↑j
                add     [rbp+var_4], 1

loc_149B:                               ; CODE XREF: validate+16↑j
                mov     eax, [rbp+var_4]
                cmp     eax, [rbp+var_1C]
                jl      short loc_1459
                nop
                leave
                retn
; } // starts at 1441
validate        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __fastcall chance(const char *p)
chance          proc near               ; CODE XREF: main+48↓p

s2              = qword ptr -1018h
buf             = byte ptr -1010h
readcount       = dword ptr -4

; __unwind {
                push    rbp
                mov     rbp, rsp
                sub     rsp, 1020h
                mov     [rbp+s2], rdi
                lea     rax, [rbp+buf]
                mov     edx, 0FFFh      ; nbytes
                mov     rsi, rax        ; buf
                mov     edi, 0          ; fd
                call    _read
                mov     [rbp+readcount], eax
                cmp     [rbp+readcount], 1
                jg      short loc_14F0
                lea     rdi, s          ; "Come on.... seriously?"
                call    _puts
                mov     edi, 0FFFFFFFFh ; status
                call    _exit
; ---------------------------------------------------------------------------

loc_14F0:                               ; CODE XREF: chance+32↑j
                mov     edx, [rbp+readcount]
                lea     rax, [rbp+buf]
                mov     esi, edx
                mov     rdi, rax
                call    validate
                mov     rcx, [rbp+s2]
                lea     rax, [rbp+buf]
                mov     edx, 64h ; 'd'  ; n
                mov     rsi, rcx        ; s2
                mov     rdi, rax        ; s1
                call    _memcmp
                test    eax, eax
                jnz     short loc_153C
                lea     rdi, aYouWin    ; "You win!"
                call    _puts
                mov     edi, 0          ; status
                call    _exit
; ---------------------------------------------------------------------------

loc_153C:                               ; CODE XREF: chance+7E↑j
                lea     rdi, aGuessAgain ; "Guess again!"
                call    _puts
                nop
                leave
                retn
; } // starts at 14A6
chance          endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; __int64 __fastcall main(__int64, char **, char **)
main            proc near               ; DATA XREF: start+1D↑o

p               = qword ptr -10h
var_4           = dword ptr -4

; __unwind {
                push    rbp
                mov     rbp, rsp
                sub     rsp, 10h
                mov     eax, 0
                call    setup
                lea     rdi, aLetSPlayAGame ; "Let's play a game!"
                call    _puts
                lea     rdi, aYouHave10Tries ; "You have 10 tries to guess the password"
                call    _puts
                mov     [rbp+var_4], 0
                jmp     short loc_15A8
; ---------------------------------------------------------------------------

loc_157E:                               ; CODE XREF: main+61↓j
                mov     edi, 0Ah
                call    gen_rand_string
                mov     [rbp+p], rax
                mov     rax, [rbp+p]
                mov     rdi, rax
                call    chance
                mov     rax, [rbp+p]
                mov     rdi, rax        ; ptr
                call    _free
                add     [rbp+var_4], 1

loc_15A8:                               ; CODE XREF: main+31↑j
                cmp     [rbp+var_4], 9
                jle     short loc_157E
                mov     eax, 0
                leave
                retn
; } // starts at 154B
main            endp

; ---------------------------------------------------------------------------
                align 20h

; =============== S U B R O U T I N E =======================================


; void init(void)
init            proc near               ; DATA XREF: start+16↑o
; __unwind {
                push    r15
                mov     r15, rdx
                push    r14
                mov     r14, rsi
                push    r13
                mov     r13d, edi
                push    r12
                lea     r12, off_3DD8
                push    rbp
                lea     rbp, off_3DE0
                push    rbx
                sub     rbp, r12
                sub     rsp, 8
                call    _init_proc
                sar     rbp, 3
                jz      short loc_160E
                xor     ebx, ebx
                nop     dword ptr [rax]

loc_15F8:                               ; CODE XREF: init+4C↓j
                mov     rdx, r15
                mov     rsi, r14
                mov     edi, r13d
                call    qword ptr [r12+rbx*8]
                add     rbx, 1
                cmp     rbp, rbx
                jnz     short loc_15F8

loc_160E:                               ; CODE XREF: init+31↑j
                add     rsp, 8
                pop     rbx
                pop     rbp
                pop     r12
                pop     r13
                pop     r14
                pop     r15
                retn
; } // starts at 15C0
init            endp

; ---------------------------------------------------------------------------
                align 20h
; [00000001 BYTES: COLLAPSED FUNCTION fini. PRESS CTRL-NUMPAD+ TO EXPAND]
; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment mempage public 'CODE' use64
                assume cs:LOAD
                ;org 1621h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 4
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_fini           segment dword public 'CODE' use64
                assume cs:_fini
                ;org 1624h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


                public _term_proc
_term_proc      proc near
                sub     rsp, 8
                add     rsp, 8
                retn
_term_proc      endp

_fini           ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_rodata         segment qword public 'CONST' use64
                assume cs:_rodata
                ;org 2000h
unk_2000        db    1                 ; DATA XREF: LOAD:0000000000000130↑o
                db    0
                db    2
                db    0
                db    0
                db    0
                db    0
                db    0
; const char file[]
file            db '/dev/urandom',0     ; DATA XREF: setup+D↑o
; const char format[]
format          db 'Today',27h,'s magic number is %lx',0Ah,0
                                        ; DATA XREF: setup+49↑o
; const char s[]
s               db 'Come on.... seriously?',0 ; DATA XREF: validate+40↑o
                                        ; chance+34↑o
; const char aYouWin[]
aYouWin         db 'You win!',0         ; DATA XREF: chance+80↑o
; const char aGuessAgain[]
aGuessAgain     db 'Guess again!',0     ; DATA XREF: chance:loc_153C↑o
; const char aLetSPlayAGame[]
aLetSPlayAGame  db 'Let',27h,'s play a game!',0 ; DATA XREF: main+12↑o
                align 8
; const char aYouHave10Tries[]
aYouHave10Tries db 'You have 10 tries to guess the password',0
                                        ; DATA XREF: main+1E↑o
_rodata         ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_eh_frame_hdr   segment dword public 'CONST' use64
                assume cs:_eh_frame_hdr
                ;org 20A0h
unk_20A0        db    1                 ; DATA XREF: LOAD:0000000000000210↑o
                db  1Bh
                db    3
                db  3Bh ; ;
                db  5Ch ; \
                db    0
                db    0
                db    0
                db  0Ah
                db    0
                db    0
                db    0
                db  80h
                db 0EFh
                db 0FFh
                db 0FFh
                db 0A8h
                db    0
                db    0
                db    0
                db  70h ; p
                db 0F0h
                db 0FFh
                db 0FFh
                db 0D0h
                db    0
                db    0
                db    0
                db  80h
                db 0F0h
                db 0FFh
                db 0FFh
                db  78h ; x
                db    0
                db    0
                db    0
                db 0B0h
                db 0F1h
                db 0FFh
                db 0FFh
                db 0E8h
                db    0
                db    0
                db    0
                db  49h ; I
                db 0F2h
                db 0FFh
                db 0FFh
                db    8
                db    1
                db    0
                db    0
                db 0A1h
                db 0F3h
                db 0FFh
                db 0FFh
                db  28h ; (
                db    1
                db    0
                db    0
                db    6
                db 0F4h
                db 0FFh
                db 0FFh
                db  48h ; H
                db    1
                db    0
                db    0
                db 0ABh
                db 0F4h
                db 0FFh
                db 0FFh
                db  68h ; h
                db    1
                db    0
                db    0
                db  20h
                db 0F5h
                db 0FFh
                db 0FFh
                db  88h
                db    1
                db    0
                db    0
                db  80h
                db 0F5h
                db 0FFh
                db 0FFh
                db 0D0h
                db    1
                db    0
                db    0
_eh_frame_hdr   ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
LOAD            segment mempage public 'DATA' use64
                assume cs:LOAD
                ;org 20FCh
                align 20h
LOAD            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_eh_frame       segment qword public 'CONST' use64
                assume cs:_eh_frame
                ;org 2100h
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  78h ; x
                db  10h
                db    1
                db  1Bh
                db  0Ch
                db    7
                db    8
                db  90h
                db    1
                db    7
                db  10h
                db  14h
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db    0
                db 0F0h
                db 0FFh
                db 0FFh
                db  2Bh ; +
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  78h ; x
                db  10h
                db    1
                db  1Bh
                db  0Ch
                db    7
                db    8
                db  90h
                db    1
                db    0
                db    0
                db  24h ; $
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db 0D0h
                db 0EEh
                db 0FFh
                db 0FFh
                db 0F0h
                db    0
                db    0
                db    0
                db    0
                db  0Eh
                db  10h
                db  46h ; F
                db  0Eh
                db  18h
                db  4Ah ; J
                db  0Fh
                db  0Bh
                db  77h ; w
                db    8
                db  80h
                db    0
                db  3Fh ; ?
                db  1Ah
                db  3Bh ; ;
                db  2Ah ; *
                db  33h ; 3
                db  24h ; $
                db  22h ; "
                db    0
                db    0
                db    0
                db    0
                db  14h
                db    0
                db    0
                db    0
                db  44h ; D
                db    0
                db    0
                db    0
                db  98h
                db 0EFh
                db 0FFh
                db 0FFh
                db    8
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  5Ch ; \
                db    0
                db    0
                db    0
                db 0C0h
                db 0F0h
                db 0FFh
                db 0FFh
                db  99h
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db  10h
                db  86h
                db    2
                db  43h ; C
                db  0Dh
                db    6
                db    2
                db  94h
                db  0Ch
                db    7
                db    8
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  7Ch ; |
                db    0
                db    0
                db    0
                db  39h ; 9
                db 0F1h
                db 0FFh
                db 0FFh
                db  58h ; X
                db    1
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db  10h
                db  86h
                db    2
                db  43h ; C
                db  0Dh
                db    6
                db    3
                db  53h ; S
                db    1
                db  0Ch
                db    7
                db    8
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  9Ch
                db    0
                db    0
                db    0
                db  71h ; q
                db 0F2h
                db 0FFh
                db 0FFh
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db  10h
                db  86h
                db    2
                db  43h ; C
                db  0Dh
                db    6
                db    2
                db  60h ; `
                db  0Ch
                db    7
                db    8
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db 0BCh
                db    0
                db    0
                db    0
                db 0B6h
                db 0F2h
                db 0FFh
                db 0FFh
                db 0A5h
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db  10h
                db  86h
                db    2
                db  43h ; C
                db  0Dh
                db    6
                db    2
                db 0A0h
                db  0Ch
                db    7
                db    8
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db 0DCh
                db    0
                db    0
                db    0
                db  3Bh ; ;
                db 0F3h
                db 0FFh
                db 0FFh
                db  6Ah ; j
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db  10h
                db  86h
                db    2
                db  43h ; C
                db  0Dh
                db    6
                db    2
                db  65h ; e
                db  0Ch
                db    7
                db    8
                db    0
                db    0
                db  44h ; D
                db    0
                db    0
                db    0
                db 0FCh
                db    0
                db    0
                db    0
                db  90h
                db 0F3h
                db 0FFh
                db 0FFh
                db  5Dh ; ]
                db    0
                db    0
                db    0
                db    0
                db  42h ; B
                db  0Eh
                db  10h
                db  8Fh
                db    2
                db  45h ; E
                db  0Eh
                db  18h
                db  8Eh
                db    3
                db  45h ; E
                db  0Eh
                db  20h
                db  8Dh
                db    4
                db  45h ; E
                db  0Eh
                db  28h ; (
                db  8Ch
                db    5
                db  48h ; H
                db  0Eh
                db  30h ; 0
                db  86h
                db    6
                db  48h ; H
                db  0Eh
                db  38h ; 8
                db  83h
                db    7
                db  47h ; G
                db  0Eh
                db  40h ; @
                db  6Ah ; j
                db  0Eh
                db  38h ; 8
                db  41h ; A
                db  0Eh
                db  30h ; 0
                db  41h ; A
                db  0Eh
                db  28h ; (
                db  42h ; B
                db  0Eh
                db  20h
                db  42h ; B
                db  0Eh
                db  18h
                db  42h ; B
                db  0Eh
                db  10h
                db  42h ; B
                db  0Eh
                db    8
                db    0
                db  10h
                db    0
                db    0
                db    0
                db  44h ; D
                db    1
                db    0
                db    0
                db 0A8h
                db 0F3h
                db 0FFh
                db 0FFh
                db    1
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
_eh_frame       ends

; ELF Initialization Function Table
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_init_array     segment qword public 'DATA' use64
                assume cs:_init_array
                ;org 3DD8h
off_3DD8        dq offset sub_1220      ; DATA XREF: LOAD:0000000000000168↑o
                                        ; LOAD:0000000000000280↑o ...
_init_array     ends

; ELF Termination Function Table
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_fini_array     segment qword public 'DATA' use64
                assume cs:_fini_array
                ;org 3DE0h
off_3DE0        dq offset sub_11E0      ; DATA XREF: init+19↑o
_fini_array     ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_jcr            segment qword public 'DATA' use64
                assume cs:_jcr
                ;org 3DE8h
unk_3DE8        db    0                 ; DATA XREF: sub_1220↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
_jcr            ends

; ELF Dynamic Information
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
LOAD            segment mempage public 'DATA' use64
                assume cs:LOAD
                ;org 3DF0h
stru_3DF0       Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:00000000000001A0↑o
                                        ; .got.plt:0000000000004000↓o
                                        ; DT_NEEDED libc.so.6
                Elf64_Dyn <0Ch, 1000h>  ; DT_INIT
                Elf64_Dyn <0Dh, 1624h>  ; DT_FINI
                Elf64_Dyn <19h, 3DD8h>  ; DT_INIT_ARRAY
                Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
                Elf64_Dyn <1Ah, 3DE0h>  ; DT_FINI_ARRAY
                Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
                Elf64_Dyn <6FFFFEF5h, 308h> ; DT_GNU_HASH
                Elf64_Dyn <5, 560h>     ; DT_STRTAB
                Elf64_Dyn <6, 338h>     ; DT_SYMTAB
                Elf64_Dyn <0Ah, 0F7h>   ; DT_STRSZ
                Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
                Elf64_Dyn <15h, 0>      ; DT_DEBUG
                Elf64_Dyn <3, 4000h>    ; DT_PLTGOT
                Elf64_Dyn <2, 150h>     ; DT_PLTRELSZ
                Elf64_Dyn <14h, 7>      ; DT_PLTREL
                Elf64_Dyn <17h, 7C0h>   ; DT_JMPREL
                Elf64_Dyn <7, 6B8h>     ; DT_RELA
                Elf64_Dyn <8, 108h>     ; DT_RELASZ
                Elf64_Dyn <9, 18h>      ; DT_RELAENT
                Elf64_Dyn <6FFFFFFBh, 8000000h> ; DT_FLAGS_1
                Elf64_Dyn <6FFFFFFEh, 688h> ; DT_VERNEED
                Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
                Elf64_Dyn <6FFFFFF0h, 658h> ; DT_VERSYM
                Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
                Elf64_Dyn <0>           ; DT_NULL
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
LOAD            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_got            segment qword public 'DATA' use64
                assume cs:_got
                ;org 3FD0h
_ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
                                        ; DATA XREF: sub_1150+1B↑r
__libc_start_main_ptr dq offset __libc_start_main ; DATA XREF: start+24↑r
__gmon_start___ptr dq offset __gmon_start__ ; DATA XREF: _init_proc+4↑r
_Jv_RegisterClasses_ptr dq offset _Jv_RegisterClasses
                                        ; DATA XREF: sub_1220:loc_1238↑r
_ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
                                        ; DATA XREF: sub_1190+28↑r
__cxa_finalize_ptr dq offset __imp___cxa_finalize ; DATA XREF: __cxa_finalize↑r
                                        ; sub_11E0+9↑r
_got            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_got_plt        segment qword public 'DATA' use64
                assume cs:_got_plt
                ;org 4000h
                dq offset stru_3DF0
qword_4008      dq 0                    ; DATA XREF: sub_1020↑r
qword_4010      dq 0                    ; DATA XREF: sub_1020+6↑r
off_4018        dq offset free          ; DATA XREF: _free↑r
off_4020        dq offset puts          ; DATA XREF: _puts↑r
off_4028        dq offset setbuf        ; DATA XREF: _setbuf↑r
off_4030        dq offset printf        ; DATA XREF: _printf↑r
off_4038        dq offset alarm         ; DATA XREF: _alarm↑r
off_4040        dq offset close         ; DATA XREF: _close↑r
off_4048        dq offset read          ; DATA XREF: _read↑r
off_4050        dq offset srand         ; DATA XREF: _srand↑r
off_4058        dq offset memcmp        ; DATA XREF: _memcmp↑r
off_4060        dq offset calloc        ; DATA XREF: _calloc↑r
off_4068        dq offset memcpy        ; DATA XREF: _memcpy↑r
off_4070        dq offset open          ; DATA XREF: _open↑r
off_4078        dq offset exit          ; DATA XREF: _exit↑r
off_4080        dq offset rand          ; DATA XREF: _rand↑r
_got_plt        ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_data           segment qword public 'DATA' use64
                assume cs:_data
                ;org 4088h
                align 10h
; void *off_4090
off_4090        dq offset off_4090      ; DATA XREF: sub_11E0+17↑r
                                        ; .data:off_4090↓o
_data           ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
LOAD            segment mempage public 'DATA' use64
                assume cs:LOAD
                ;org 4098h
unk_4098        db    ? ;               ; DATA XREF: sub_1150↑o sub_1190↑o ...
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_409F        db    ? ;               ; DATA XREF: sub_1150+7↑o
LOAD            ends

; ===========================================================================

; Segment type: Uninitialized
; Segment permissions: Read/Write
_bss            segment para public 'BSS' use64
                assume cs:_bss
                ;org 40A0h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                public stdout
; FILE *stdout
stdout          dq ?                    ; DATA XREF: LOAD:0000000000000518↑o
                                        ; setup+6E↑r
                                        ; Copy of shared data
                align 10h
                public stdin
; FILE *stdin
stdin           dq ?                    ; DATA XREF: LOAD:0000000000000548↑o
                                        ; setup+82↑r
                                        ; Copy of shared data
byte_40B8       db ?                    ; DATA XREF: sub_11E0↑r sub_11E0+29↑w
                align 20h
_bss            ends

; ===========================================================================

; Segment type: Externs
; extern
; void free(void *ptr)
                extrn free:near         ; CODE XREF: _free↑j
                                        ; DATA XREF: .got.plt:off_4018↑o
; int puts(const char *s)
                extrn puts:near         ; CODE XREF: _puts↑j
                                        ; DATA XREF: .got.plt:off_4020↑o
; void setbuf(FILE *stream, char *buf)
                extrn setbuf:near       ; CODE XREF: _setbuf↑j
                                        ; DATA XREF: .got.plt:off_4028↑o
; int printf(const char *format, ...)
                extrn printf:near       ; CODE XREF: _printf↑j
                                        ; DATA XREF: .got.plt:off_4030↑o
; unsigned int alarm(unsigned int seconds)
                extrn alarm:near        ; CODE XREF: _alarm↑j
                                        ; DATA XREF: .got.plt:off_4038↑o
; int close(int fd)
                extrn close:near        ; CODE XREF: _close↑j
                                        ; DATA XREF: .got.plt:off_4040↑o
; ssize_t read(int fd, void *buf, size_t nbytes)
                extrn read:near         ; CODE XREF: _read↑j
                                        ; DATA XREF: .got.plt:off_4048↑o
; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                extrn __libc_start_main:near ; CODE XREF: start+24↑p
                                        ; DATA XREF: .got:__libc_start_main_ptr↑o
; void srand(unsigned int seed)
                extrn srand:near        ; CODE XREF: _srand↑j
                                        ; DATA XREF: .got.plt:off_4050↑o
; int memcmp(const void *s1, const void *s2, size_t n)
                extrn memcmp:near       ; CODE XREF: _memcmp↑j
                                        ; DATA XREF: .got.plt:off_4058↑o
; void *calloc(size_t nmemb, size_t size)
                extrn calloc:near       ; CODE XREF: _calloc↑j
                                        ; DATA XREF: .got.plt:off_4060↑o
; void *memcpy(void *dest, const void *src, size_t n)
                extrn memcpy:near       ; CODE XREF: _memcpy↑j
                                        ; DATA XREF: .got.plt:off_4068↑o
; int open(const char *file, int oflag, ...)
                extrn open:near         ; CODE XREF: _open↑j
                                        ; DATA XREF: .got.plt:off_4070↑o
; void __noreturn exit(int status)
                extrn exit:near         ; CODE XREF: _exit↑j
                                        ; DATA XREF: .got.plt:off_4078↑o
; int rand(void)
                extrn rand:near         ; CODE XREF: _rand↑j
                                        ; DATA XREF: .got.plt:off_4080↑o
; int __fastcall __cxa_finalize(void *)
                extrn __imp___cxa_finalize:near ; weak
                                        ; CODE XREF: __cxa_finalize↑j
                                        ; DATA XREF: .got:__cxa_finalize_ptr↑o
                extrn _ITM_deregisterTMCloneTable ; weak
                                        ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
                extrn __gmon_start__:near ; weak ; CODE XREF: _init_proc+10↑p
                                        ; DATA XREF: .got:__gmon_start___ptr↑o
                extrn _Jv_RegisterClasses:near ; weak ; CODE XREF: sub_1220+28↑p
                                        ; DATA XREF: .got:_Jv_RegisterClasses_ptr↑o
                extrn _ITM_registerTMCloneTable ; weak
                                        ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o


                end start
